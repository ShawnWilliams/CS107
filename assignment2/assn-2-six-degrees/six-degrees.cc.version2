#include <vector>
#include <list>
#include <set>
#include <string>
#include <iostream>
#include <iomanip>
#include "imdb.h"
#include "path.h"
#include <stdlib.h>
#include <string.h>
using namespace std;

/**
 * Using the specified prompt, requests that the user supply
 * the name of an actor or actress.  The code returns
 * once the user has supplied a name for which some record within
 * the referenced imdb existsif (or if the user just hits return,
 * which is a signal that the empty string should just be returned.)
 *
 * @param prompt the text that should be used for the meaningful
 *               part of the user prompt.
 * @param db a reference to the imdb which can be used to confirm
 *           that a user's response is a legitimate one.
 * @return the name of the user-supplied actor or actress, or the
 *         empty string.
 */

static string promptForActor(const string& prompt, const imdb& db)
{
  string response;
  while (true) {
    cout << prompt << " [or <enter> to quit]: ";
    getline(cin, response);
    if (response == "") return "";
    vector<film> credits;
    if (db.getCredits(response, credits)) return response;
    cout << "We couldn't find \"" << response << "\" in the movie database. "
	 << "Please try again." << endl;
  }
}

/**
 * Serves as the main entry point for the six-degrees executable.
 * There are no parameters to speak of.
 *
 * @param argc the number of tokens passed to the command line to
 *             invoke this executable.  It's completely ignored
 *             here, because we don't expect any arguments.
 * @param argv the C strings making up the full command line.
 *             We expect argv[0] to be logically equivalent to
 *             "six-degrees" (or whatever absolute path was used to
 *             invoke the program), but otherwise these are ignored
 *             as well.
 * @return 0 if the program ends normally, and undefined otherwise.
 */

int main(int argc, const char *argv[])
{
  imdb db(determinePathToData(argv[1])); // inlined in imdb-utils.h
  if (!db.good()) {
    cout << "Failed to properly initialize the imdb database." << endl;
    cout << "Please check to make sure the source files exist and that you have permission to read them." << endl;
    exit(1);
  }
  
  while (true) {
    string source = promptForActor("Actor or actress", db);
    if (source == "") break;
    string target = promptForActor("Another actor or actress", db);
    if (target == "") break;
    if (source == target) {
      cout << "Good one.  This is only interesting if you specify two different people." << endl;
    } 
    else {
      // replace the following line by a call to your generateShortestPath routine... 
      //cout << endl << "No path between those two people could be found." << endl << endl;
      
      //Initialization
      path front_path(source);
      path last_path(source);
      list<path> partialPaths;
      set<string> previouslySeenActors;
      set<film> previouslySeenFilms;
      vector<film> cur_actor_film;
      vector<string> cur_costar; 

      partialPaths.push_front(front_path);//add first path to partialPaths List

      string sLast_actor = source;
      previouslySeenActors.insert(source);
      while(partialPaths.size() > 0 && partialPaths.front().getLength() <= 5){
        front_path = partialPaths.front();
        partialPaths.pop_front();

        cur_actor_film.clear();//using for temp vector<film> variable
        db.getCredits(sLast_actor, cur_actor_film);

        for(vector<film>::iterator iter0 = cur_actor_film.begin(); iter0 != cur_actor_film.end(); iter0++){
          if(previouslySeenFilms.find(*iter0) == previouslySeenFilms.end()){//if current movie have't been saught before
              
              previouslySeenFilms.insert(*iter0);//add this movie to previouslySeenFilms
              cur_costar.clear();//using for temp vector<string> variable
              db.getCast(*iter0, cur_costar);//look up movie's actor

              for(vector<string>::iterator iter2 = cur_costar.begin(); iter2 != cur_costar.end(); iter2++){
                if(previouslySeenActors.find(*iter2) == previouslySeenActors.end()){//if current actor have't been saught before
                  previouslySeenActors.insert(*iter2);
                  last_path.addConnection(*iter0, *iter2);//add new connection
                  if(target == *iter2){
                  	partialPaths.push_back(last_path);//add new path to previouslySeenFilms
                    cout << "found!" << endl;
                    cout << last_path;
                    return 0;
                  }
                  else{
                  	partialPaths.push_back(last_path);//add new path to previouslySeenFilms
                  }
                  last_path = front_path;//copy the front path
                }
              }
          }
          sLast_actor = front_path.getLastPlayer();
        }
      }

    }
  }
  
  cout << "Thanks for playing!" << endl;
  return 0;
}

